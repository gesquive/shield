package engine

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"regexp"
	"text/template"
	"time"

	"github.com/pkg/errors"
	"gopkg.in/yaml.v2"
)

var Version string

// DefaultMaxImportDepth is the number of import levels to allow by default
// Import depth prevents an infinite loop of imports
const DefaultMaxImportDepth = 100

type RuleSet struct {
	template       *template.Template
	vars           map[string]interface{}
	templatePath   string
	maxImportDepth uint
}

func NewRuleset(templatePath string) (*RuleSet, error) {
	ruleset := new(RuleSet)

	templateBytes, err := ruleset.readTemplateFile(templatePath)
	if err != nil {
		return nil, errors.Wrapf(err, "could not read template file")
	}
	ruleset.templatePath = templatePath
	ruleset.maxImportDepth = DefaultMaxImportDepth

	expandedBytes, err := ruleset.expandImports(templateBytes, 0)

	rulesetBytes, vars, err := ruleset.extractVars(expandedBytes)
	ruleset.vars = vars

	ruleset.template = template.Must(template.New("rules").Funcs(NetFuncs()).Parse(string(rulesetBytes)))

	return ruleset, nil
}

func (r *RuleSet) SetImportDepth(newDepth uint) {
	r.maxImportDepth = newDepth
}

func (r *RuleSet) GenerateRules(appVersion string) ([]byte, error) {
	t := time.Now()
	header := fmt.Sprintf("# Generated by %s on %s\n", appVersion, t.Format("2006/01/02 15:04:05 -700"))

	var msgBuffer bytes.Buffer
	msgBuffer.WriteString(header)
	err := r.template.Execute(&msgBuffer, r.vars)
	if err != nil {
		return nil, errors.Wrapf(err, "template error")
	}

	return msgBuffer.Bytes(), nil
}

func (r *RuleSet) readTemplateFile(templatePath string) ([]byte, error) {
	if _, err := os.Stat(templatePath); os.IsNotExist(err) {
		return nil, errors.Wrapf(err, "open template")
	}

	templateBytes, err := ioutil.ReadFile(templatePath)
	if err != nil {
		return nil, errors.Wrapf(err, "read file")
	}

	return templateBytes, nil
}

func (r *RuleSet) extractVars(ruleset []byte) ([]byte, map[string]interface{}, error) {
	vars := make(map[string]interface{})
	re := regexp.MustCompile("(?smU)\\s*{\\$(.*)\\$}\\s*")
	matches := re.FindAll(ruleset, -1)
	if matches == nil {
		return ruleset, vars, nil
	}

	for _, match := range matches {
		exps := re.FindSubmatch(match)
		if len(exps) < 2 {
			// Then we don't have a submatch for the group
			continue
		}
		ymlVar := bytes.TrimSpace(exps[1])
		parsedVars := make(map[string]interface{})

		err := yaml.Unmarshal(ymlVar, &parsedVars)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "parse rules")
		}
		for k, v := range parsedVars {
			vars[k] = v
		}

	}
	cleanRules := re.ReplaceAll(ruleset, []byte(""))
	return cleanRules, vars, nil

}

func (r *RuleSet) expandImports(ruleset []byte, depth uint) ([]byte, error) {
	re := regexp.MustCompile("(?smU){\\@(.*)\\@}")
	matches := re.FindAll(ruleset, -1)
	if matches == nil {
		return ruleset, nil
	}

	expandedRules := []byte("")

	for _, match := range matches {
		parts := re.FindSubmatch(match)
		if len(parts) < 2 {
			continue // there is no submatch
		}
		importPath := string(bytes.TrimSpace(parts[1]))

		if depth < r.maxImportDepth {
			importBytes, err := r.getImportFileBytes(importPath)
			if err != nil {
				return nil, err
			}

			importRules, err := r.expandImports(importBytes, depth+1)
			if err != nil {
				return nil, err
			}

			expandedRules = bytes.Replace(ruleset, parts[0], importRules, 1)
		} else {
			// remove the import
			expandedRules = bytes.Replace(ruleset, parts[0], []byte(""), 1)
		}
	}

	return expandedRules, nil
}

func (r RuleSet) getImportFileBytes(importPath string) ([]byte, error) {
	templateDirPath := path.Dir(r.templatePath)
	relativePath := path.Join(templateDirPath, importPath)

	// first try a relative path
	if _, err := os.Stat(relativePath); err == nil {
		importBytes, err := ioutil.ReadFile(relativePath)
		if err != nil {
			return nil, errors.Wrapf(err, "could not read import '%s'", relativePath)
		}
		return importBytes, nil
	}
	// second, try the full path
	if _, err := os.Stat(importPath); err == nil {
		importBytes, err := ioutil.ReadFile(importPath)
		if err != nil {
			return nil, errors.Wrapf(err, "could not read import '%s'", importPath)
		}
		return importBytes, nil
	}

	return nil, errors.Errorf("Could not find import '%s'", importPath)
}
