package engine

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"text/template"
	"time"

	"github.com/pkg/errors"
	"gopkg.in/yaml.v2"
)

var Version string

type RuleSet struct {
	template *template.Template
	vars     map[string]interface{}
}

func NewRuleset(templatePath string) (*RuleSet, error) {
	ruleset := new(RuleSet)

	templateBytes, err := ruleset.readTemplateFile(templatePath)
	if err != nil {
		return nil, errors.Wrapf(err, "could not read template file")
	}

	rulesetBytes, vars, err := ruleset.extractVars(templateBytes)
	ruleset.vars = vars

	ruleset.template = template.Must(template.New("rules").Funcs(NetFuncs()).Parse(string(rulesetBytes)))

	return ruleset, nil
}

func (r *RuleSet) GenerateRules(appVersion string) ([]byte, error) {
	t := time.Now()
	header := fmt.Sprintf("# Generated by %s on %s\n", appVersion, t.Format("2006/01/02 15:04:05 -700"))

	var msgBuffer bytes.Buffer
	msgBuffer.WriteString(header)
	err := r.template.Execute(&msgBuffer, r.vars)
	if err != nil {
		return nil, errors.Wrapf(err, "template error")
	}

	return msgBuffer.Bytes(), nil
}

func (r *RuleSet) readTemplateFile(templatePath string) ([]byte, error) {
	if _, err := os.Stat(templatePath); os.IsNotExist(err) {
		return nil, errors.Wrapf(err, "open template")
	}

	templateBytes, err := ioutil.ReadFile(templatePath)
	if err != nil {
		return nil, errors.Wrapf(err, "read file")
	}

	return templateBytes, nil
}

func (r *RuleSet) extractVars(ruleset []byte) ([]byte, map[string]interface{}, error) {
	vars := make(map[string]interface{})
	re := regexp.MustCompile("(?smU)\\s*{\\$(.*)\\$}\\s*")
	matches := re.FindAll(ruleset, -1)
	if matches == nil {
		return ruleset, vars, nil
	}

	for _, match := range matches {
		exps := re.FindSubmatch(match)
		if len(exps) < 2 {
			// Then we don't have a submatch for the group
			continue
		}
		ymlVar := bytes.TrimSpace(exps[1])
		parsedVars := make(map[string]interface{})

		err := yaml.Unmarshal(ymlVar, &parsedVars)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "parse rules")
		}
		for k, v := range parsedVars {
			vars[k] = v
		}

	}
	cleanRules := re.ReplaceAll(ruleset, []byte(""))
	return cleanRules, vars, nil

}
